#!/usr/bin/env bash

set -e
shopt -s failglob

# Define helpers, check we are in the right place, and validate arguments.
. "$(dirname -- "$0")/shared.sh" "$@"

# Remove all cached Python bytecode directories, to avoid confusion and avoid
# insisting the user do manual and error-prone deletions in trivial cases.
# Bytecode files are regenerated automatically, so this should always be safe.
find . -path '*/__pycache__/*.pyc' -type f -delete
find . -name __pycache__ -type d -delete

# If the directories we insist on making anew are empty, delete them first.
rmdir algoviz notebooks notes tests 2>/dev/null || :

# We will be renaming algoviz/basics to algoviz/algoviz. Check if that's safe.
# This avoids later moving basics INTO algoviz, gives a clear error message,
# and warns about the risk of mistakenly deleting the entire repository.
if [ -e algoviz ]; then
    if [ -d algoviz ]; then
        err 'a subdirectory "algoviz" already exists'
    else
        err 'a non-directory "algoviz" already exists'
    fi
    msg "DANGER: it's algoviz/algoviz - don't delete the wrong algoviz!"
    exit 1
fi

# Check if we should be able to create the other directories.
for d in notebooks notes tests; do
    if [ -e "$d" ]; then
        if [ -d "$d" ]; then
            die "a subdirectory \"$d\" already exists"
        else
            die "a non-directory \"$d\" already exists"
        fi
    fi
done

# Split basics/ as multiple directories, handling __init__.py and config files.
git mv basics algoviz
git mv algoviz/{.flake8,.isort.cfg,.vscode,environment.yml,requirements.txt} .
mkdir notes notebooks tests
git mv algoviz/{*-notes.txt,*.md} notes/
git mv algoviz/*.ipynb notebooks/
git mv algoviz/test_* tests/
touch {algoviz,tests}/__init__.py

# Patch config files and newly broken module code except for imports.
sed -bri 's/^name:[ ]+algoviz-basics\b/name: algoviz/' environment.yml
sed -bri "s/'decorators'/'algoviz.decorators'/" algoviz/decorators.py
sed -bri "s/'test_context'/'tests.test_context'/" tests/test_context.py
sed -bri 's@\bgreetall.py\b@algoviz/greetall.py@; s@[ ][.][.]/data/@ data/@' \
    tests/test_greetall.txt

# Stage the fixed files and remove a config file that is no longer needed.
git add environment.yml {algoviz,tests}/__init__.py
git rm --quiet math/environment.yml
git add algoviz/decorators.py tests/{test_context.py,test_greetall.txt}

# Patch "import" and "from" statements in modules (at top level) and doctests.
"$(dirname -- "$0")/patch-imports"

cat <<EOF
All automated steps appear to have completed successfully.

Most changes were staged. Run "git diff --staged" to see them.

Patches to imports were not staged. Run "git diff" to see them.

From this point forward, almost all use of the project should be from the root
of the repository. Editors/IDEs should open that directory. Test runners, style
checkers, and jupyter (including for JupyterLab) should be run from there.

Remember to:

1. Inspect the changes.
2. Make/use the new conda environment. Do "conda develop ." in the repo root.
3. Run all tests. Ensure the pytest, unittest, and doctest test runners work.
4. Stage. Run isort (it will consoldate new "from" imports) and flake8.
5. Manually update, run, and inspect every notebook. Do this carefully.
6. Manually inspect all docstrings and comments, fixing outdated references.
7. Update /README.md. Include how to: open project, run tests, use notebooks.
8. Merge to other branches. Manually check and fix them, even if no conflicts.

To reread this message, look inside the script file: $0
EOF

name: Tests (current)

on: [push, pull_request]

jobs:
  test:
    name: Test

    strategy:
      matrix:
        runner: [pytest, unittest, doctest]
        os: [ubuntu, macos, windows]
        dependency-manager: [poetry, conda]
        include:
          # Behavior varying by dependency manager and operating system:

          - dependency-manager: poetry
            shell: bash
            run-prefix: '~/.local/bin/poetry run '

          - dependency-manager: poetry
            os: windows
            run-prefix: '"$APPDATA/Python/Scripts/poetry" run '

          - dependency-manager: conda
            shell: bash -l {0}
            run-prefix: ''

          # Behavior varying by test runner utility program:

          - runner: pytest
            description: Run all tests (pytest)
            command: pytest --doctest-modules

          # FIXME: Remove this when conda is used, as detailed below, and
          # update the comment below. (If we are even going to do it this way.)
          #
          # Including this here as well as in tests-compatible-poetry.yml runs
          # the unittest runner both with frozen poetry.lock package versions
          # (this workflow) and non-frozen package versions (that workflow).
          # This differs from conda, where we're not freezing package versions.
          # so the unittest runner is listed in tests-compatible-conda.yml but
          # not also tests-current-conda.yml. So having it in both of those
          # would always test exactly the same configuration and behavior.
          - runner: unittest
            description: Run unittest tests
            command: python -m unittest

          - runner: doctest
            description: Run doctests
            command: python -m doctest palgoviz/*.py tests/*.py tests/*.txt

    runs-on: ${{ matrix.os }}-latest

    defaults:
      run:
        shell: ${{ matrix.shell }}

    steps:
      # Initial setup, not varying by dependency manager:

      - name: Check out repository
        uses: actions/checkout@v3

      # Setup when using poetry:

      - if: matrix.dependency-manager == poetry
        name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # TODO: Print the install script commit hash and Poetry version.
      - if: matrix.dependency-manager == poetry
        name: Install poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/EliahKagan/install.python-poetry.org/ci-repro/palgoviz/install-poetry.py |
              python3 -

      - if: matrix.dependency-manager == poetry
        name: Install project and test runner
        run: poetry install --only=main,test

      # Setup when using conda (or, really, we use micromamba in CI):

      - if: matrix.dependency-manager == conda
        name: Provision with micromamba
        uses: mamba-org/provision-with-micromamba@v15

      - if: matrix.dependency-manager == conda
        name: Make editable install
        run: pip install -e .

      # The thing we came here to do (call a test-runner program to run tests):

      - name: ${{ matrix.description }}
        run: ${{ matrix.run-prefix }}${{ matrix.command }}
        timeout-minutes: 2

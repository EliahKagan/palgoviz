Doctests for greetall.py.

TODO: Write better, more exhaustive tests, probably with pytest.


Doctests for running the script - argument parsing, file handling, greeting:

    >>> from subprocess import getstatusoutput as gso
    >>> status, output = gso('python greetall.py ../data/names.txt')
    >>> status
    0
    >>> print(output)
    Hello, Eliah!
    Hello, David!
    Hello, Dr. Evil!

    >>> status, output = gso('python greetall.py ../data/names2.txt es')
    >>> status
    0
    >>> print(output)
    ¡Hola, Eliah!
    ¡Hola, David!
    ¡Hola, Dr. Evil!
    ¡Hola, Stalin!

    >>> status, output = gso('python greetall.py')
    >>> status
    1
    >>> print(output)
    ERROR in greetall.py: Did not pass a filename

    >>> status, output = gso('python greetall.py ../data/names.txt qx')
    >>> status
    1
    >>> print(output)
    ERROR in greetall.py: qx is an unrecognized language code.

    >>> status, output = gso('python greetall.py ../data/names.txt en foo')
    >>> status
    0
    >>> print(output)
    WARNING in greetall.py: Too many arguments, see docstring for usage
    Hello, Eliah!
    Hello, David!
    Hello, Dr. Evil!

    >>> status, output = gso('python greetall.py ../data/nonexistent-file.txt')
    >>> status
    1
    >>> output.startswith('ERROR in greetall.py:')
    True

    >>> status, output = gso('python greetall.py .')
    >>> status
    1
    >>> output.startswith('ERROR in greetall.py:')
    True


Doctests for the Config class (see also test_greetall.py):

    >>> import greet
    >>> from greetall import Config, greet_all, greet_all_try

    >>> Config()  # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    Config(names_processor=<function greet_all at 0x...>,
           greeter_factory=<class 'greet.FrozenGreeter'>)
    >>> _ == Config(greet_all, greet.FrozenGreeter)
    True

    >>> Config(greet_all_try)  # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    Config(names_processor=<function greet_all_try at 0x...>,
           greeter_factory=<class 'greet.FrozenGreeter'>)
    >>> _ == Config(greet_all_try, greet.FrozenGreeter)
    True

    >>> Config(greeter_factory=greet.MutableGreeter)
    ... # doctest: +ELLIPSIS +NORMALIZE_WHITESPACE
    Config(names_processor=<function greet_all at 0x...>,
           greeter_factory=<class 'greet.MutableGreeter'>)
    >>> _ == Config(greet_all, greet.MutableGreeter)
    True

    >>> Config() == Config(names_processor=greet_all_try)
    False
    >>> Config() == Config(greeter_factory=greet.MutableGreeter)
    False

Old decorators.py doctests
==========================

    >>> import functools

    >>> try:
    ...     from algoviz.decorators import *
    ... except ModuleNotFoundError:
    ...     import sys
    ...     sys.path.append('')
    ...     from algoviz.decorators import *


Old doctests for @peek_arg:

    >>> @peek_arg
    ... def square(n): return n**2
    >>> result = square(3)
    square(3)
    >>> result
    9
    >>> @peek_arg
    ... def hello(name): print(f'Hello, {name}!')
    >>> hello('Bob')
    hello('Bob')
    Hello, Bob!


Old doctests for @peek_return:

    >>> @peek_return
    ... def square(x): return x**2
    >>> result = square(3)
    square(3) -> 9
    >>> result
    9
    >>> @peek_return
    ... def hello(name): print(f'Hello, {name}!')
    >>> hello('Bob')
    Hello, Bob!
    hello('Bob') -> None


Old doctests for @call:

    >>> @call
    ... def hi():
    ...     print('Hi, world!')
    Hi, world!
    >>> hi()
    Hi, world!


Old doctests for @call_with():

    >>> @call_with('Dr. Evil', 'Albuquerque', exclaim=True)
    ... def welcome(name, place, exclaim=False):
    ...     punctuator = '!' if exclaim else '.'
    ...     print(f'Hello, {name}{punctuator} Welcome to {place}{punctuator}')
    Hello, Dr. Evil! Welcome to Albuquerque!
    >>> @call_with(*range(1, 11), verbose=True, padding=0)
    ... def print_sum(*addends, verbose, padding=1):
    ...     total = sum(addends)
    ...     if verbose:
    ...         pad = ' ' * padding
    ...         print(f'{pad}+{pad}'.join(map(str, addends)), '=', total)
    ...     else:
    ...         print(total)
    1+2+3+4+5+6+7+8+9+10 = 55
    >>> welcome('user', 'the internet')
    Hello, user. Welcome to the internet.
    >>> print_sum(-8, 2, 14, 9, verbose=False)
    17


Old doctests for @thrice:

    >>> @thrice
    ... def hello(): print('Hello, world!')
    >>> hello()
    Hello, world!
    Hello, world!
    Hello, world!
    >>> @thrice
    ... def answer(): return 42
    >>> answer()  # No output; the wrapped function always returns None.


Old doctests for @repeat:

    >>> @repeat(2)
    ... def bye():
    ...     print('Cya later!')
    >>> bye()
    Cya later!
    Cya later!


Old doctests for @peek_one:

    >>> @peek_one
    ... def square(x): return x**2
    >>> result = square(3)
    square(3)
    square(3) -> 9


Old doctests for @peek:

    >>> @peek
    ... def square(x): return x**2
    >>> result = square(3)
    square(3)
    square(3) -> 9
    >>> @peek
    ... def proclaim(*args, **kwargs):
    ...     print('Good news', *args, **kwargs)
    >>> proclaim('Hello', 'world', sep=': ', end='!\n')
    proclaim('Hello', 'world', sep=': ', end='!\n')
    Good news: Hello: world!
    proclaim('Hello', 'world', sep=': ', end='!\n') -> None


Old doctests for @give_metadata_from():

    >>> def f(): 'Wrapped docstring.'

    >>> @give_metadata_from(f)
    ... def g(): pass
    >>> g.__name__, g.__module__, g.__qualname__, g.__doc__, g.__annotations__
    ('f', '__main__', 'f', 'Wrapped docstring.', {})
    >>> hasattr(g, '__wrapped__')
    False

    >>> @give_metadata_from(f, expose=True)
    ... def h(): pass
    >>> h.__name__, h.__module__, h.__qualname__, h.__doc__, h.__annotations__
    ('f', '__main__', 'f', 'Wrapped docstring.', {})
    >>> h.__wrapped__ is f
    True

    @give_metadata_from supports no other customization. But it automatically
    supports one important case where @functools.wraps does need customization.
    When the wrapper is a class, its __dict__ attribute is a mappingproxy, so:

    >>> @functools.wraps(f)  # Will try to call C1.__dict__.update(f.__dict__).
    ... class C1: pass
    Traceback (most recent call last):
      ...
    AttributeError: 'mappingproxy' object has no attribute 'update'

    >>> @functools.wraps(f, updated=())  # Works, no C2.__dict__.update call.
    ... class C2: pass
    >>> C2.__name__
    'f'

    >>> @give_metadata_from(f)  # Never calls anything like C3.__dict__.update.
    ... class C3: pass
    >>> C3.__name__
    'f'


Old doctests for @int_fn:

    >>> @int_fn
    ... def f(n):
    ...     print(f'f({n!r})')
    ...     return n + 1
    >>> f(1)
    f(1)
    2
    >>> f(False)
    f(False)
    1
    >>> f(1.1)
    Traceback (most recent call last):
        ...
    TypeError: f must be called with int, got float
    >>> @int_fn
    ... def g(n):
    ...     return n / 2
    >>> g(4)
    Traceback (most recent call last):
        ...
    TypeError: g must return an int, returned float
    >>> g(5)
    Traceback (most recent call last):
        ...
    TypeError: g must return an int, returned float


Old doctests for @count_calls:

    >>> @count_calls
    ... def square(n): return n**2
    >>> result = square(3)
    square(3), call 1
    >>> result
    9
    >>> @count_calls
    ... def hello(name): print(f'Hello, {name}!')
    >>> hello('Bob')
    hello('Bob'), call 1
    Hello, Bob!
    >>> square(4)
    square(4), call 2
    16
    >>> hello('Bob')
    hello('Bob'), call 2
    Hello, Bob!
    >>> hello('Mary')
    hello('Mary'), call 3
    Hello, Mary!


Old doctests for @convert_arg():

    >>> @convert_arg(int)
    ... def square(n):
    ...     return n**2
    >>> square(3)
    9
    >>> square('4')
    16
    >>> square(5.1)
    25
    >>> @convert_arg(len)  # The converter can itself be any unary function.
    ... def mask(similar):
    ...     return '-' * similar
    >>> mask('hello')
    '-----'
    >>> @convert_arg(lambda s: s + 'ab')
    ... @convert_arg(str.upper)
    ... def munge1(text):
    ...     return text * 2
    >>> munge1('pqr')  # Outer converter appends, inner converter upcases.
    'PQRABPQRAB'
    >>> @convert_arg(str.upper)
    ... @convert_arg(lambda s: s + 'ab')
    ... def munge2(text):
    ...     return text * 2
    >>> munge2('pqr')  # Outer convert upcases, inner converter appends.
    'PQRabPQRab'


Old doctests for @convert_return():

    >>> @convert_return(list)
    ... def digits_lowtohigh(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_lowtohigh(4294967295)
    [5, 9, 2, 7, 6, 9, 4, 9, 2, 4]

    >>> @convert_return(lambda xs: xs[::-1])  # OK, xs will be a list.
    ... @convert_return(list)
    ... def digits_hightolow(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_hightolow(4294967295)
    [4, 2, 9, 4, 9, 6, 7, 2, 9, 5]

    >>> @convert_return(list)
    ... @convert_return(lambda xs: xs[::-1])  # NOT OK, xs will be a generator.
    ... def digits_hightolow(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_hightolow(4294967295)
    Traceback (most recent call last):
        ...
    TypeError: 'generator' object is not subscriptable

    >>> @convert_arg(int)                     # OK.
    ... @convert_return(lambda a: a[::-1])
    ... @convert_return(list)
    ... def digits_hightolow(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_hightolow(4294967295.3)
    [4, 2, 9, 4, 9, 6, 7, 2, 9, 5]

    >>> @convert_return(lambda a: a[::-1])
    ... @convert_return(list)
    ... @convert_arg(int)                     # OK.
    ... def digits_hightolow(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_hightolow(4294967295.3)
    [4, 2, 9, 4, 9, 6, 7, 2, 9, 5]

    >>> @convert_return(lambda a: a[::-1])
    ... @convert_arg(int)                     # Weird, but OK.
    ... @convert_return(list)
    ... def digits_hightolow(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_hightolow(4294967295.3)
    [4, 2, 9, 4, 9, 6, 7, 2, 9, 5]

    >>> @convert_return(list)
    ... @convert_arg(int)
    ... @convert_return(lambda a: a[::-1])    # NOT OK, xs will be a generator.
    ... def digits_hightolow(positive_integer):
    ...     while positive_integer != 0:
    ...         yield positive_integer % 10
    ...         positive_integer //= 10
    >>> digits_hightolow(4294967295.3)
    Traceback (most recent call last):
        ...
    TypeError: 'generator' object is not subscriptable


Old doctests for @auto_prime:

    >>> import collections, inspect
    >>> @auto_prime
    ... def alternate_ends(iterable, *, back_first=False):
    ...     pool = collections.deque(iterable)
    ...     yield  # The caller receives a generator primed to here.
    ...     if pool and back_first: yield pool.pop()
    ...     while pool:
    ...         yield pool.popleft()
    ...         if pool: yield pool.pop()

    >>> it = alternate_ends(range(1, 6))
    >>> inspect.getgeneratorstate(it)  # GEN_SUSPENDED instead of GEN_CREATED.
    'GEN_SUSPENDED'
    >>> list(it)
    [1, 5, 2, 4, 3]
    >>> list(alternate_ends(range(1, 6), back_first=True))
    [5, 1, 4, 2, 3]
    >>> alternate_ends(10 // i for i in range(3, -1, -1))  # Fails fast.
    Traceback (most recent call last):
      ...
    ZeroDivisionError: integer division or modulo by zero

    >>> @auto_prime
    ... def first_yield_non_none(values):
    ...     while values: yield values.pop()
    >>> a = [10, 20, 30]
    >>> first_yield_non_none(a)
    Traceback (most recent call last):
      ...
    TypeError: generator yielded non-None value when primed
    >>> a
    [10, 20]


Old doctests for @assign_attributes():

    >>> @assign_attributes(__name__='affine', weight=10, bias=20)
    ... def f(x): return x * f.weight + f.bias
    >>> f.__name__, f.weight, f.bias, f(3.75)
    ('affine', 10, 20, 57.5)

    >>> @assign_attributes(__add__=lambda self, other: other,
    ...                    __radd__=lambda self, other: other)
    ... class UniversalAdditiveIdentity: __slots__ = ()
    >>> 3 + UniversalAdditiveIdentity(), [10, 20] + UniversalAdditiveIdentity()
    (3, [10, 20])
    >>> UniversalAdditiveIdentity() + 3, UniversalAdditiveIdentity() + [10, 20]
    (3, [10, 20])


Old doctests for @suppressing():

    >>> @suppressing(TypeError, IndexError, fallback_result='FAIL!')
    ... def add_firsts(a, b, *, reverse=False):
    ...     return b[0] + a[0] if reverse else a[0] + b[0]

    >>> add_firsts('foo', 'bar'), add_firsts('foo', 'bar', reverse=True)
    ('fb', 'bf')
    >>> add_firsts('foo', 3), add_firsts('foo', 3, reverse=True)
    ('FAIL!', 'FAIL!')
    >>> add_firsts('', 'bar'), add_firsts('', 'bar', reverse=True)
    ('FAIL!', 'FAIL!')
    >>> add_firsts({}, 2)
    Traceback (most recent call last):
      ...
    KeyError: 0

    >>> suppressing(ValueError)(int)('2.5') is None
    True


Old doctests for @dict_equality:

    >>> @dict_equality
    ... class Point:
    ...     def __init__(self, x, y):
    ...         self.x = x
    ...         self.y = y
    ...     def __repr__(self):
    ...         return f'{type(self).__name__}({self.x!r}, {self.y!r})'
    >>> Point(1, 2) == Point(1, 2) == Point(1.0, 2.0) != Point(2, 1)
    True
    >>> {Point(1, 2), Point(1, 2)}
    {Point(1, 2)}

    >>> @dict_equality
    ... class Weird:
    ...     __slots__ = ('a', 'b', '__dict__')
    ...     def __init__(self, a, b, c):
    ...         self.a = a
    ...         self.b = b
    ...         self.c = c
    >>> Weird(1, 2, 3) == Weird(4, 5, 3) != Weird(4, 5, 6)
    True

    >>> class Base:
    ...     def __init__(self, x, y):
    ...         self.x = x
    ...         self.y = y
    >>> @dict_equality
    ... class Derived(Base): pass
    >>> class MoreDerived(Derived): pass
    >>> Base(1, 2) == Derived(1, 2), Derived(1, 2) == Base(1, 2)
    (False, False)
    >>> Derived(1, 2) == MoreDerived(1, 2), MoreDerived(1, 2) == Derived(1, 2)
    (True, True)

    >>> @dict_equality
    ... class A: pass
    >>> @dict_equality
    ... class B: pass
    >>> class C: pass
    >>> A() == A(), A() == B(), B() == A(), A() == C(), C() == A()
    (True, False, False, False, False)
    >>> x = A(); y = A(); x.p = 10; x.q = 20; y.q = 20; y.p = 10
    >>> x == y, hash(x) == hash(y)
    (True, True)


Old doctests for @count_calls_in_attribute():

    >>> @count_calls_in_attribute(name='veterancy')
    ... def do(verb, noun, direction, speed):
    ...     print(f'Got: {verb=}, {noun=}, {direction=}, {speed=}')
    >>> do.veterancy
    0
    >>> do('defuse', 'bomb', 'northwest', 'slow'); do.veterancy
    Got: verb='defuse', noun='bomb', direction='northwest', speed='slow'
    1
    >>> do('carry', 'microfilm', speed='fast', direction='east'); do.veterancy
    Got: verb='carry', noun='microfilm', direction='east', speed='fast'
    2
    >>> hasattr(do, 'count')  # Named counter and metadata attributes only.
    False

    The attribute name is optional, defaulting to "count":

    >>> @count_calls_in_attribute()  # Same as passing name='count'.
    ... def add_up(*nums): return sum(nums)
    >>> add_up.count, add_up(2, 7, 3), add_up(), add_up(4, 1), add_up.count
    (0, 12, 0, 5, 3)

    When keeping this default, it can also be used directly as a decorator:

    >>> @count_calls_in_attribute
    ... def add_up(*nums): return sum(nums)
    >>> add_up.count, add_up(2, 7, 3), add_up(), add_up(4, 1), add_up.count
    (0, 12, 0, 5, 3)


Old doctests for @wrap_uncallable_args():

    wrap_uncallable_args can be used as a decorator factory, with kw=False:

    >>> @wrap_uncallable_args(kw=False)  # Same effect as with "()".
    ... def pass_args_through_1(*args, **kwargs): return args, kwargs
    >>> a, kw = pass_args_through_1(min, 42, f=max, g=76)
    >>> a[0](5, 7), a[0](7, 5), a[1](5, 7), a[1](7, 5), kw, a[1](0, x=4, w=6)
    (5, 5, 42, 42, {'f': <built-in function max>, 'g': 76}, 42)

    wrap_uncallable_args can be used as a decorator factory, with kw=True:

    >>> @wrap_uncallable_args(kw=True)  # kw=True has to be passed explicitly.
    ... def pass_args_through_2(*args, **kwargs): return args, kwargs
    >>> a, kw = pass_args_through_2(min, 42, f=max, g=76)
    >>> a[0](5, 7), a[0](7, 5), a[1](5, 7), a[1](7, 5)
    (5, 5, 42, 42)
    >>> kw['f'](5, 7), kw['f'](7, 5), kw['g'](5, 7), kw['g'](7, 5)
    (7, 7, 76, 76)
    >>> a[1](0, x=4, w=6), kw['g'](0, x=4, w=6)
    (42, 76)

    wrap_uncallable_args can also be used directly as a decorator, but only if
    you want the default of kw=False:

    >>> @wrap_uncallable_args  # Same effect here as with "()", too.
    ... def pass_args_through_3(*args, **kwargs): return args, kwargs
    >>> a, kw = pass_args_through_3(min, 42, f=max, g=76)
    >>> a[0](5, 7), a[0](7, 5), a[1](5, 7), a[1](7, 5), kw, a[1](0, x=4, w=6)
    (5, 5, 42, 42, {'f': <built-in function max>, 'g': 76}, 42)


Old doctests for make_fmap (though they will probably be retained unchanged):

    >>> class Squarer:
    ...     def __call__(self, x): return x**2

    >>> make_fmap(-7)(abs, Squarer(), 3, lambda x: 2**x, -5)
    (7, 49, 3, 0.0078125, -5)

    >>> make_fmap(-7, strict=True)(abs, Squarer(), 3, lambda x: 2**x, -5)
    Traceback (most recent call last):
      ...
    TypeError: 'int' object is not callable


Old doctests for @joining():

    >>> @joining(use_repr=True, begin='[', end=']')
    ... def f(n): return (ch * n for ch in 'ABC')
    >>> f(3)
    "['AAA', 'BBB', 'CCC']"
    >>> @joining('; ', format_spec='.2f')
    ... def g(a, b, *, delta=1):
    ...     while a < b:
    ...         yield a
    ...         a += delta
    >>> g(1.7, 6.4, delta=1.15)
    '1.70; 2.85; 4.00; 5.15; 6.30'

    When keeping all defaults, it can also be used directly as a decorator:

    >>> @joining
    ... def g(start, stop):
    ...     while start > stop:
    ...         yield start
    ...         start /= 2
    >>> g(7, 0.5)
    '7, 3.5, 1.75, 0.875'


Old doctests for @repeat_collect():

    >>> import math, io, itertools

    >>> indices = itertools.count(1)
    >>> @repeat_collect(3)
    ... def f(*, weight, bias):
    ...     print(f'Called {f.__name__}({weight=}, {bias=}).')
    ...     return next(indices) * weight + bias
    >>> f(weight=2, bias=3)
    Called f(weight=2, bias=3).
    Called f(weight=2, bias=3).
    Called f(weight=2, bias=3).
    (5, 7, 9)

    >>> sio = io.StringIO('foo\nbar\nbaz\n')
    >>> @repeat_collect
    ... def g(back, front):
    ...     return back(front(sio.readline().removesuffix('\n')))
    >>> g(str.capitalize, lambda s: s[1:])
    ('Oo', 'Ar')

    >>> repeat_collect(0)(math.cos)(math.pi)
    ()
    >>> repeat_collect(1)(math.cos)(math.pi)
    (-1.0,)
    >>> repeat_collect(2)(math.cos)(math.pi)
    (-1.0, -1.0)
    >>> repeat_collect()(math.cos)(math.pi)
    (-1.0, -1.0)
    >>> repeat_collect(math.cos)(math.pi)
    (-1.0, -1.0)


Old doctests for @linear_combinable:

    >>> @linear_combinable
    ... def f(x): 'Double a number.'; return x * 2
    >>> @linear_combinable
    ... def g(x): 'Square a number and subtract 1.'; return x**2 - 1
    >>> @linear_combinable
    ... def three(_): 'Return 3, for any argument.'; return 3

    >>> g(10)
    99
    >>> h = 3 * f - 2 * g + three
    >>> [h(x) for x in range(6)]
    [5, 9, 9, 5, -3, -15]
    >>> def sq(x): x**2
    >>> f + sq  # doctest: +ELLIPSIS
    Traceback (most recent call last):
      ...
    TypeError: unsupported operand type(s) for +: '...' and 'function'

    >>> (2 * g / 2 * 2 / 2 * 2 / 2 * 2)(10)
    198.0
    >>> f / 0
    Traceback (most recent call last):
      ...
    ZeroDivisionError: second-order division by zero
    >>> 1 / f  # doctest: +ELLIPSIS
    Traceback (most recent call last):
      ...
    TypeError: unsupported operand type(s) for /: 'int' and '...'
    >>> (2 * linear_combinable(str.upper) * 3 + f)('xyz')
    'XYZXYZXYZXYZXYZXYZxyzxyz'

    >>> len({f, g, three, linear_combinable(sq), linear_combinable(sq)})
    4
    >>> for h in f, g, three:  # Check that metadata attributes are intact.
    ...     print([getattr(h, name) for name in functools.WRAPPER_ASSIGNMENTS])
    ['__main__', 'f', 'f', 'Double a number.', {}]
    ['__main__', 'g', 'g', 'Square a number and subtract 1.', {}]
    ['__main__', 'three', 'three', 'Return 3, for any argument.', {}]
